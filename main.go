// MIT License
//
// Copyright (c) 2024 nohar
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package main

import (
	"flag"
	"go/parser"
	"go/token"
	"html/template"
	"log"
	"os"
	"path/filepath"
	"strings"
)

var (
	outFile = "zzz_errfuncs.go"
)

func init() {
	log.SetOutput(os.Stderr)
	log.SetFlags(0)

	flag.CommandLine.SetOutput(os.Stderr)
	flag.StringVar(&outFile, "out", outFile, "output `filename`")
	flag.Usage = func() {
		log.Printf("Usage:\n  gen-errfuncs [-out <filename>] <src_file>\n\nOptions:\n")
		flag.PrintDefaults()
	}
	flag.Parse()
}

func main() {
	srcFile := flag.Arg(0)
	if srcFile == "" {
		flag.Usage()
		log.Fatal("ERROR: missing src_file")
	}
	dstFile := filepath.Join(filepath.Dir(srcFile), outFile)

	render(dstFile, parse(srcFile))
}

type fileSpec struct {
	Package string
	Errors  []errSpec
}

type errSpec struct {
	Name  string
	Radix string
}

func parse(path string) *fileSpec {
	data, err := os.ReadFile(path)
	if err != nil {
		log.Fatal(err)
	}

	fset := token.NewFileSet()
	file, err := parser.ParseFile(fset, path, data, parser.ParseComments)
	if err != nil {
		log.Fatal(err)
	}

	spec := &fileSpec{
		Package: file.Name.Name,
		Errors:  make([]errSpec, 0, 10),
	}
	for name := range file.Scope.Objects {
		if radix, ok := strings.CutPrefix(name, "Err"); ok {
			spec.Errors = append(spec.Errors, errSpec{name, radix})
		}
	}
	return spec
}

const tplData = `//go:build !ignore_autogenerated 
// +build !ignore_autogenerated

// This file was generated by gen-errfuncs.  DO NOT EDIT.

package {{.Package}}

import (
	"errors"
	"fmt"
)
{{ range .Errors }} 
func {{ .Radix }}(err error) error {
	return errors.Join({{ .Name }}, err)
}

func {{ .Radix }}f(msg string, args ...any) error {
	return fmt.Errorf("%w: %s", {{ .Name }}, fmt.Sprintf(msg, args...))
}
{{ end }}`

func render(path string, spec *fileSpec) {
	out, err := os.OpenFile(path, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		log.Fatalf("couldn't open %s: %s", path, err)
	}
	template.Must(template.New(path).Parse(tplData)).Execute(out, spec)
}
